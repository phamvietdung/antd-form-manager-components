// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Storyshots Example/Button Large 1`] = `
<button
  className="storybook-button storybook-button--large storybook-button--secondary"
  style={
    Object {
      "backgroundColor": undefined,
    }
  }
  type="button"
>
  Button
</button>
`;

exports[`Storyshots Example/Button Primary 1`] = `
<button
  className="storybook-button storybook-button--medium storybook-button--primary"
  style={
    Object {
      "backgroundColor": undefined,
    }
  }
  type="button"
>
  Button
</button>
`;

exports[`Storyshots Example/Button Secondary 1`] = `
<button
  className="storybook-button storybook-button--medium storybook-button--secondary"
  style={
    Object {
      "backgroundColor": undefined,
    }
  }
  type="button"
>
  Button
</button>
`;

exports[`Storyshots Example/Button Small 1`] = `
<button
  className="storybook-button storybook-button--small storybook-button--secondary"
  style={
    Object {
      "backgroundColor": undefined,
    }
  }
  type="button"
>
  Button
</button>
`;

exports[`Storyshots Example/DFormManager Primary 1`] = `
<form
  autoComplete="off"
  className="ant-form ant-form-horizontal"
  id="basic"
  onReset={[Function]}
  onSubmit={[Function]}
>
  <div
    className="ant-row ant-form-item"
    style={Object {}}
  >
    <div
      className="ant-col ant-col-8 ant-form-item-label"
      style={Object {}}
    >
      <label
        className="ant-form-item-required"
        htmlFor="basic_medium"
        title="medium"
      >
        medium
      </label>
    </div>
    <div
      className="ant-col ant-col-16 ant-form-item-control"
      style={Object {}}
    >
      <div
        className="ant-form-item-control-input"
      >
        <div
          className="ant-form-item-control-input-content"
        >
          <input
            className="ant-input"
            id="basic_medium"
            onBlur={[Function]}
            onChange={[Function]}
            onFocus={[Function]}
            onKeyDown={[Function]}
            type="text"
            value=""
          />
        </div>
      </div>
    </div>
  </div>
  <div
    className="ant-row ant-form-item"
    style={Object {}}
  >
    <div
      className="ant-col ant-col-8 ant-form-item-label"
      style={Object {}}
    >
      <label
        className="ant-form-item-required"
        htmlFor="basic_password"
        title="Password"
      >
        Password
      </label>
    </div>
    <div
      className="ant-col ant-col-16 ant-form-item-control"
      style={Object {}}
    >
      <div
        className="ant-form-item-control-input"
      >
        <div
          className="ant-form-item-control-input-content"
        >
          <span
            className="ant-input-affix-wrapper ant-input-password"
            onMouseUp={[Function]}
          >
            <input
              action="click"
              className="ant-input"
              id="basic_password"
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              style={null}
              type="password"
              value=""
            />
            <span
              className="ant-input-suffix"
            >
              <span
                aria-label="eye-invisible"
                className="anticon anticon-eye-invisible ant-input-password-icon"
                onClick={[Function]}
                onMouseDown={[Function]}
                onMouseUp={[Function]}
                role="img"
                tabIndex={-1}
              >
                <svg
                  aria-hidden="true"
                  data-icon="eye-invisible"
                  fill="currentColor"
                  focusable="false"
                  height="1em"
                  viewBox="64 64 896 896"
                  width="1em"
                >
                  <path
                    d="M942.2 486.2Q889.47 375.11 816.7 305l-50.88 50.88C807.31 395.53 843.45 447.4 874.7 512 791.5 684.2 673.4 766 512 766q-72.67 0-133.87-22.38L323 798.75Q408 838 512 838q288.3 0 430.2-300.3a60.29 60.29 0 000-51.5zm-63.57-320.64L836 122.88a8 8 0 00-11.32 0L715.31 232.2Q624.86 186 512 186q-288.3 0-430.2 300.3a60.3 60.3 0 000 51.5q56.69 119.4 136.5 191.41L112.48 835a8 8 0 000 11.31L155.17 889a8 8 0 0011.31 0l712.15-712.12a8 8 0 000-11.32zM149.3 512C232.6 339.8 350.7 258 512 258c54.54 0 104.13 9.36 149.12 28.39l-70.3 70.3a176 176 0 00-238.13 238.13l-83.42 83.42C223.1 637.49 183.3 582.28 149.3 512zm246.7 0a112.11 112.11 0 01146.2-106.69L401.31 546.2A112 112 0 01396 512z"
                  />
                  <path
                    d="M508 624c-3.46 0-6.87-.16-10.25-.47l-52.82 52.82a176.09 176.09 0 00227.42-227.42l-52.82 52.82c.31 3.38.47 6.79.47 10.25a111.94 111.94 0 01-112 112z"
                  />
                </svg>
              </span>
            </span>
          </span>
        </div>
      </div>
    </div>
  </div>
  <div
    className="ant-row ant-form-item"
    style={Object {}}
  >
    <div
      className="ant-col ant-col-16 ant-col-offset-8 ant-form-item-control"
      style={Object {}}
    >
      <div
        className="ant-form-item-control-input"
      >
        <div
          className="ant-form-item-control-input-content"
        >
          <label
            className="ant-checkbox-wrapper ant-checkbox-wrapper-checked"
          >
            <span
              className="ant-checkbox ant-checkbox-checked"
              style={Object {}}
            >
              <input
                checked={true}
                className="ant-checkbox-input"
                id="basic_remember"
                onBlur={[Function]}
                onChange={[Function]}
                onFocus={[Function]}
                onKeyDown={[Function]}
                onKeyPress={[Function]}
                onKeyUp={[Function]}
                type="checkbox"
              />
              <span
                className="ant-checkbox-inner"
              />
            </span>
            <span>
              Remember me
            </span>
          </label>
        </div>
      </div>
    </div>
  </div>
  <div
    className="ant-row ant-form-item"
    style={Object {}}
  >
    <div
      className="ant-col ant-col-16 ant-col-offset-8 ant-form-item-control"
      style={Object {}}
    >
      <div
        className="ant-form-item-control-input"
      >
        <div
          className="ant-form-item-control-input-content"
        >
          <button
            className="ant-btn ant-btn-primary"
            onClick={[Function]}
            type="submit"
          >
            <span>
              Submit
            </span>
          </button>
        </div>
      </div>
    </div>
  </div>
</form>
`;

exports[`Storyshots Example/DFormManager Secondary 1`] = `
<form
  autoComplete="off"
  className="ant-form ant-form-horizontal"
  id="basic"
  onReset={[Function]}
  onSubmit={[Function]}
>
  <div
    className="ant-row ant-form-item"
    style={Object {}}
  >
    <div
      className="ant-col ant-col-8 ant-form-item-label"
      style={Object {}}
    >
      <label
        className="ant-form-item-required"
        htmlFor="basic_small"
        title="small"
      >
        small
      </label>
    </div>
    <div
      className="ant-col ant-col-16 ant-form-item-control"
      style={Object {}}
    >
      <div
        className="ant-form-item-control-input"
      >
        <div
          className="ant-form-item-control-input-content"
        >
          <input
            className="ant-input"
            id="basic_small"
            onBlur={[Function]}
            onChange={[Function]}
            onFocus={[Function]}
            onKeyDown={[Function]}
            type="text"
            value=""
          />
        </div>
      </div>
    </div>
  </div>
  <div
    className="ant-row ant-form-item"
    style={Object {}}
  >
    <div
      className="ant-col ant-col-8 ant-form-item-label"
      style={Object {}}
    >
      <label
        className="ant-form-item-required"
        htmlFor="basic_password"
        title="Password"
      >
        Password
      </label>
    </div>
    <div
      className="ant-col ant-col-16 ant-form-item-control"
      style={Object {}}
    >
      <div
        className="ant-form-item-control-input"
      >
        <div
          className="ant-form-item-control-input-content"
        >
          <span
            className="ant-input-affix-wrapper ant-input-password"
            onMouseUp={[Function]}
          >
            <input
              action="click"
              className="ant-input"
              id="basic_password"
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              style={null}
              type="password"
              value=""
            />
            <span
              className="ant-input-suffix"
            >
              <span
                aria-label="eye-invisible"
                className="anticon anticon-eye-invisible ant-input-password-icon"
                onClick={[Function]}
                onMouseDown={[Function]}
                onMouseUp={[Function]}
                role="img"
                tabIndex={-1}
              >
                <svg
                  aria-hidden="true"
                  data-icon="eye-invisible"
                  fill="currentColor"
                  focusable="false"
                  height="1em"
                  viewBox="64 64 896 896"
                  width="1em"
                >
                  <path
                    d="M942.2 486.2Q889.47 375.11 816.7 305l-50.88 50.88C807.31 395.53 843.45 447.4 874.7 512 791.5 684.2 673.4 766 512 766q-72.67 0-133.87-22.38L323 798.75Q408 838 512 838q288.3 0 430.2-300.3a60.29 60.29 0 000-51.5zm-63.57-320.64L836 122.88a8 8 0 00-11.32 0L715.31 232.2Q624.86 186 512 186q-288.3 0-430.2 300.3a60.3 60.3 0 000 51.5q56.69 119.4 136.5 191.41L112.48 835a8 8 0 000 11.31L155.17 889a8 8 0 0011.31 0l712.15-712.12a8 8 0 000-11.32zM149.3 512C232.6 339.8 350.7 258 512 258c54.54 0 104.13 9.36 149.12 28.39l-70.3 70.3a176 176 0 00-238.13 238.13l-83.42 83.42C223.1 637.49 183.3 582.28 149.3 512zm246.7 0a112.11 112.11 0 01146.2-106.69L401.31 546.2A112 112 0 01396 512z"
                  />
                  <path
                    d="M508 624c-3.46 0-6.87-.16-10.25-.47l-52.82 52.82a176.09 176.09 0 00227.42-227.42l-52.82 52.82c.31 3.38.47 6.79.47 10.25a111.94 111.94 0 01-112 112z"
                  />
                </svg>
              </span>
            </span>
          </span>
        </div>
      </div>
    </div>
  </div>
  <div
    className="ant-row ant-form-item"
    style={Object {}}
  >
    <div
      className="ant-col ant-col-16 ant-col-offset-8 ant-form-item-control"
      style={Object {}}
    >
      <div
        className="ant-form-item-control-input"
      >
        <div
          className="ant-form-item-control-input-content"
        >
          <label
            className="ant-checkbox-wrapper ant-checkbox-wrapper-checked"
          >
            <span
              className="ant-checkbox ant-checkbox-checked"
              style={Object {}}
            >
              <input
                checked={true}
                className="ant-checkbox-input"
                id="basic_remember"
                onBlur={[Function]}
                onChange={[Function]}
                onFocus={[Function]}
                onKeyDown={[Function]}
                onKeyPress={[Function]}
                onKeyUp={[Function]}
                type="checkbox"
              />
              <span
                className="ant-checkbox-inner"
              />
            </span>
            <span>
              Remember me
            </span>
          </label>
        </div>
      </div>
    </div>
  </div>
  <div
    className="ant-row ant-form-item"
    style={Object {}}
  >
    <div
      className="ant-col ant-col-16 ant-col-offset-8 ant-form-item-control"
      style={Object {}}
    >
      <div
        className="ant-form-item-control-input"
      >
        <div
          className="ant-form-item-control-input-content"
        >
          <button
            className="ant-btn ant-btn-primary"
            onClick={[Function]}
            type="submit"
          >
            <span>
              Submit
            </span>
          </button>
        </div>
      </div>
    </div>
  </div>
</form>
`;

exports[`Storyshots Example/Header Logged In 1`] = `
<header>
  <div
    className="wrapper"
  >
    <div>
      <svg
        height="32"
        viewBox="0 0 32 32"
        width="32"
        xmlns="http://www.w3.org/2000/svg"
      >
        <g
          fill="none"
          fillRule="evenodd"
        >
          <path
            d="M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z"
            fill="#FFF"
          />
          <path
            d="M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z"
            fill="#555AB9"
          />
          <path
            d="M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z"
            fill="#91BAF8"
          />
        </g>
      </svg>
      <h1>
        Acme
      </h1>
    </div>
    <div>
      <button
        className="storybook-button storybook-button--small storybook-button--secondary"
        style={
          Object {
            "backgroundColor": undefined,
          }
        }
        type="button"
      >
        Log out
      </button>
    </div>
  </div>
</header>
`;

exports[`Storyshots Example/Header Logged Out 1`] = `
<header>
  <div
    className="wrapper"
  >
    <div>
      <svg
        height="32"
        viewBox="0 0 32 32"
        width="32"
        xmlns="http://www.w3.org/2000/svg"
      >
        <g
          fill="none"
          fillRule="evenodd"
        >
          <path
            d="M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z"
            fill="#FFF"
          />
          <path
            d="M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z"
            fill="#555AB9"
          />
          <path
            d="M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z"
            fill="#91BAF8"
          />
        </g>
      </svg>
      <h1>
        Acme
      </h1>
    </div>
    <div>
      <button
        className="storybook-button storybook-button--small storybook-button--secondary"
        style={
          Object {
            "backgroundColor": undefined,
          }
        }
        type="button"
      >
        Log in
      </button>
      <button
        className="storybook-button storybook-button--small storybook-button--primary"
        style={
          Object {
            "backgroundColor": undefined,
          }
        }
        type="button"
      >
        Sign up
      </button>
    </div>
  </div>
</header>
`;

exports[`Storyshots Example/Page Logged In 1`] = `
<article>
  <header>
    <div
      className="wrapper"
    >
      <div>
        <svg
          height="32"
          viewBox="0 0 32 32"
          width="32"
          xmlns="http://www.w3.org/2000/svg"
        >
          <g
            fill="none"
            fillRule="evenodd"
          >
            <path
              d="M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z"
              fill="#FFF"
            />
            <path
              d="M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z"
              fill="#555AB9"
            />
            <path
              d="M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z"
              fill="#91BAF8"
            />
          </g>
        </svg>
        <h1>
          Acme
        </h1>
      </div>
      <div>
        <button
          className="storybook-button storybook-button--small storybook-button--secondary"
          style={
            Object {
              "backgroundColor": undefined,
            }
          }
          type="button"
        >
          Log out
        </button>
      </div>
    </div>
  </header>
  <section>
    <h2>
      Pages in Storybook
    </h2>
    <p>
      We recommend building UIs with a
       
      <a
        href="https://componentdriven.org"
        rel="noopener noreferrer"
        target="_blank"
      >
        <strong>
          component-driven
        </strong>
      </a>
       
      process starting with atomic components and ending with pages.
    </p>
    <p>
      Render pages with mock data. This makes it easy to build and review page states without needing to navigate to them in your app. Here are some handy patterns for managing page data in Storybook:
    </p>
    <ul>
      <li>
        Use a higher-level connected component. Storybook helps you compose such data from the "args" of child component stories
      </li>
      <li>
        Assemble data in the page component from your services. You can mock these services out using Storybook.
      </li>
    </ul>
    <p>
      Get a guided tutorial on component-driven development at
       
      <a
        href="https://storybook.js.org/tutorials/"
        rel="noopener noreferrer"
        target="_blank"
      >
        Storybook tutorials
      </a>
      . Read more in the
       
      <a
        href="https://storybook.js.org/docs"
        rel="noopener noreferrer"
        target="_blank"
      >
        docs
      </a>
      .
    </p>
    <div
      className="tip-wrapper"
    >
      <span
        className="tip"
      >
        Tip
      </span>
       Adjust the width of the canvas with the
       
      <svg
        height="10"
        viewBox="0 0 12 12"
        width="10"
        xmlns="http://www.w3.org/2000/svg"
      >
        <g
          fill="none"
          fillRule="evenodd"
        >
          <path
            d="M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z"
            fill="#999"
            id="a"
          />
        </g>
      </svg>
      Viewports addon in the toolbar
    </div>
  </section>
</article>
`;

exports[`Storyshots Example/Page Logged Out 1`] = `
<article>
  <header>
    <div
      className="wrapper"
    >
      <div>
        <svg
          height="32"
          viewBox="0 0 32 32"
          width="32"
          xmlns="http://www.w3.org/2000/svg"
        >
          <g
            fill="none"
            fillRule="evenodd"
          >
            <path
              d="M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z"
              fill="#FFF"
            />
            <path
              d="M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z"
              fill="#555AB9"
            />
            <path
              d="M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z"
              fill="#91BAF8"
            />
          </g>
        </svg>
        <h1>
          Acme
        </h1>
      </div>
      <div>
        <button
          className="storybook-button storybook-button--small storybook-button--secondary"
          style={
            Object {
              "backgroundColor": undefined,
            }
          }
          type="button"
        >
          Log in
        </button>
        <button
          className="storybook-button storybook-button--small storybook-button--primary"
          style={
            Object {
              "backgroundColor": undefined,
            }
          }
          type="button"
        >
          Sign up
        </button>
      </div>
    </div>
  </header>
  <section>
    <h2>
      Pages in Storybook
    </h2>
    <p>
      We recommend building UIs with a
       
      <a
        href="https://componentdriven.org"
        rel="noopener noreferrer"
        target="_blank"
      >
        <strong>
          component-driven
        </strong>
      </a>
       
      process starting with atomic components and ending with pages.
    </p>
    <p>
      Render pages with mock data. This makes it easy to build and review page states without needing to navigate to them in your app. Here are some handy patterns for managing page data in Storybook:
    </p>
    <ul>
      <li>
        Use a higher-level connected component. Storybook helps you compose such data from the "args" of child component stories
      </li>
      <li>
        Assemble data in the page component from your services. You can mock these services out using Storybook.
      </li>
    </ul>
    <p>
      Get a guided tutorial on component-driven development at
       
      <a
        href="https://storybook.js.org/tutorials/"
        rel="noopener noreferrer"
        target="_blank"
      >
        Storybook tutorials
      </a>
      . Read more in the
       
      <a
        href="https://storybook.js.org/docs"
        rel="noopener noreferrer"
        target="_blank"
      >
        docs
      </a>
      .
    </p>
    <div
      className="tip-wrapper"
    >
      <span
        className="tip"
      >
        Tip
      </span>
       Adjust the width of the canvas with the
       
      <svg
        height="10"
        viewBox="0 0 12 12"
        width="10"
        xmlns="http://www.w3.org/2000/svg"
      >
        <g
          fill="none"
          fillRule="evenodd"
        >
          <path
            d="M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z"
            fill="#999"
            id="a"
          />
        </g>
      </svg>
      Viewports addon in the toolbar
    </div>
  </section>
</article>
`;
